@page "/Account/Login"
@attribute [AllowAnonymous]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using jtpjsapp.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<head>
<style>
.centered-flex {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh; /* 使div的高度等于视口高度 */
}
 
.content {
  /* 内容样式 */
  text-align: center;
  width: 500px;
  margin: auto;
}

.background-image {
    background-image: url('票据系统背景图.jpg'); /* 修改为你的图片路径 */
    background-size: cover; /* 背景图片覆盖整个元素 */
    background-position: center; /* 背景图片居中 */
    height: 100vh; /* 根据需要设置高度 */
    width: 100%; /* 根据需要设置宽度 */
}

</style>
</head>

<PageTitle>登录</PageTitle>

<div class="centered-flex">
<div class="content">
<h1>登录</h1>
@*<FluentGrid>*@
    @* <FluentGridItem  xs="8" sm="4"> *@
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">            
            <DataAnnotationsValidator />
            <h2>使用注册后的邮箱登录。</h2>
            <hr />
            <FluentValidationSummary class="text-danger" role="alert" />
            <FluentStack Orientation="Orientation.Vertical">
                <FluentTextField Name="Input.Email" @bind-Value="Input.Email" AutoComplete="username" Required="true" Placeholder="name@example.com" Label="邮箱" Style="width: 100%" AllowAnonymous="true"/>
                <FluentValidationMessage For="() => Input.Email" class="text-danger" />
                <FluentTextField type="password" Name="Input.Password" @bind-Value="Input.Password" AutoComplete="current-password" Required="true" Placeholder="password" Label="密码" Style="width: 100%" />
                <FluentValidationMessage For="() => Input.Password" class="text-danger" />
                <FluentCheckbox Name="Input.RememberMe" @bind-Value="Input.RememberMe" Label="记住我" />
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%">登录</FluentButton>                                  
                    <p>
                        <FluentAnchor Appearance="Appearance.Hypertext" Href="Account/ForgotPassword">忘记了你的密码?</FluentAnchor>
                    </p>
                    <p>
                        <FluentAnchor Appearance="Appearance.Hypertext" Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">注册新用户</FluentAnchor>
                    </p>
                    <p>
                        <FluentAnchor Appearance="Appearance.Hypertext" Href="Account/ResendEmailConfirmation">再次发送邮箱确认</FluentAnchor>
                    </p>                
            </FluentStack>            
        </EditForm>
@* </FluentGridItem> *@
    @*
    <FluentGridItem xs="12" sm="8">
        <h3>Use another service to log in.</h3>
        <hr />
        <ExternalLoginPicker />
    </FluentGridItem>
    *@
@* </FluentGrid>  *@
</div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]    
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }
  
    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            //RedirectManager.RedirectTo(ReturnUrl);
            RedirectManager.RedirectTo("home");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "错误：无效的登录尝试。";
        }
    }

    public async Task RegisteAsync() 
    {
            Logger.LogInformation("User registe.");
            //RedirectManager.RedirectTo(ReturnUrl);
            RedirectManager.RedirectTo("Account/Register");    
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
